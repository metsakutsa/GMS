<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_elizabeth_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>o_character_parent</parentName>
  <maskName>s_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the facing diretion
event_inherited();
facing = RIGHT;

// Sprites
portrait = s_elizabeth_portrait;

// Set the sprite array
sprite[RIGHT] = s_elizabeth_right;
sprite[UP] = s_elizabeth_up;
sprite[LEFT] = s_elizabeth_left;
sprite[DOWN] = s_elizabeth_down;
sprite[HURT] = s_elizabeth_hurt;

// Last room is used when moving between rooms
last_room = room;
state = elizabeth_move_state;

// Voice pitch is used when speaking dialog
voice_pitch = 1.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit and run the state
event_inherited();

// Execute the state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go through the door
if (state != elizabeth_wait_state) {
    state = elizabeth_wait_state;
    var transition = instance_create(0, 0, o_fade_transition);
    transition.next_room = other.next_room;
    audio_play_sound_on(o_audio_player.sfx_emitter, a_use_door, false, 30);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move to start position
if (instance_exists(o_start_position) &amp;&amp; last_room != noone) {
    with (o_start_position) {
        if (last_room == other.last_room) {
            o_elizabeth.x = x;
            o_elizabeth.y = y;
        }
    }
}

// Update the last room
last_room = room;

// Set the player's persistent back to true
if (is_in_array(state, array(elizabeth_encounter_state, elizabeth_wait_state))) {
    state = elizabeth_move_state;
    room_persistent = false;
    persistent = true;
}

// Create the view
if (!instance_exists(o_view)) {
    var view = instance_create(x+8, y+8, o_view);
    
    // We need to make sure that if we are in a cutscene we set the view to the cutscene state
    if (instance_exists(o_cutscene_parent)) {
        view.state = view_cutscene_state;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
