<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player stats
level = 1;
status_effect[status.defend] = false;
status_effect[status.slow] = false;
status_effect[status.burnt] = false;

// Get the class and update the status using the class
class = o_data.classes[? "elizabeth"];
get_stats_from_class("elizabeth");
draw_health = stats[? "health"];

// Item lists
items = ds_list_create();
item_number = ds_list_create();
pickup_item(o_data.items[? "apple"], 4);
pickup_item(o_data.items[? "potion"], 2);

// Action list
var action_index = 0;
actions = ds_list_create();
actions[| action_index++] = o_data.actions[? "attack"];
actions[| action_index++] = o_data.actions[? "defend"];

// New action list
action_level[2] = o_data.actions[? "fireball"];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the stats and item list
ds_map_destroy(stats);
ds_list_destroy(item);
ds_list_destroy(item_number);
ds_list_destroy(actions);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the draw health
var dis = draw_health - stats[? "health"];
if (dis &gt; 1) {
    draw_health = lerp(draw_health, stats[? "health"], .1);
} else {
    draw_health = stats[? "health"];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the stats
// Check for death
if (draw_health &lt;= 0) {
    if (instance_exists(o_player_battle_unit)) {
        with (o_player_battle_unit) instance_destroy();
        room_goto(r_game_over);
    }
}

// Check for levelup
if (stats[? "experience"] &gt;= stats[? "maxexperience"]) {
    // Create the level up object
    if (!instance_exists(o_levelup)) {
        instance_create(room_width-view_wview[0]/2, view_yview[0]+view_hview[0]/2, o_levelup);
    }
    
    // Update the stats
    level++;
    stats[? "experience"] = stats[? "experience"]-stats[? "maxexperience"];
    stats[? "maxexperience"] = level*10;
    stats[? "health"] = calculate_health(level, class[? "health"]);
    stats[? "maxhealth"] = stats[? "health"];
    
    // Gain a new action
    if (level &lt; array_length_1d(action_level)) {
        var new_action = action_level[level];
        if (new_action != 0) {
            
            ds_list_add(actions, new_action);
            var message = create_message(0, 24, "You learned the#"+new_action[? "name"]+" action.");
            message.x = display_get_gui_width()/2-message.width/2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
